**Mandatory Login System
begin

import data
import sys
import unicodedata

from operator import attrgetter

from . import constants
from .pep import PEP, PEPError


RESERVED = [
    (801, ''),
    ]


indent = u' '

def write_column_headers(output):
    """Output the column headers for the PEP indices."""
    column_headers = {'status': u'', 'type': u'', 'number': u'num',
                        'title': u'title', 'authors': u'owner'}
    print>>output, constants.column_format % column_headers
    underline_headers = {}
    for key, value in column_headers.items():
        underline_headers[key] = unicode(len(value) * '-')
    print>>output, constants.column_format % underline_headers


def sort_peps(peps):
    """Sort PEPs into meta, informational, accepted, open, finished,
    and essentially dead."""
    meta = []
    info = []
    accepted = []
    open_ = []
    finished = []
    historical = []
    deferred = []
    dead = []
    for pep in peps:

        if pep.status == 'Draft':
            open_.append(pep)
        elif pep.status == 'Deferred':
            deferred.append(pep)
        elif pep.type_ == 'Process':
            if pep.status == "Active":
                meta.append(pep)
            elif pep.status in ("Withdrawn", "Rejected"):
                dead.append(pep)
            else:
                historical.append(pep)
        elif pep.status in ('Rejected', 'Withdrawn',
                            'Incomplete', 'Superseded'):
            dead.append(pep)
        elif pep.type_ == 'Informational':
            # Hack until the conflict between the use of "Final"
            # for both API definition PEPs and other (actually
            # obsolete) PEPs is addressed
            if (pep.status == "Active" or
                "Release Schedule" not in pep.title):
                info.append(pep)
            else:
                historical.append(pep)
        elif pep.status in ('Accepted', 'Active'):
            accepted.append(pep)
        elif pep.status == 'Final':
            finished.append(pep)
        else:
            raise PEPError("unsorted (%s/%s)" %
                           (pep.type_, pep.status),
                           pep.filename, pep.number)
    return meta, info, accepted, open_, finished, historical, deferred, dead


def verify_email_addresses(peps):
    authors_dict = {}
    for pep in peps:
        for author in pep.authors:
            # If this is the first time we have come across an author, add him.
            if author not in authors_dict:
                authors_dict[author] = [author.email]
            else:
                found_emails = authors_dict[author]
                # If no email exists for the author, use the new value.
                if not found_emails[0]:
                    authors_dict[author] = [author.email]
                # If the new email is an empty string, move on.
                elif not author.email:
                    continue
                # If the email has not been seen, add it to the list.
                elif author.email not in found_emails:
                    authors_dict[author].append(author.email)

    valid_authors_dict = {}
    too_many_emails = []
    for author, emails in authors_dict.items():
        if len(emails) > 1:
            too_many_emails.append((author.first_last, emails))
        else:
            valid_authors_dict[author] = emails[0]
    if too_many_emails:
        err_output = []
        for author, emails in too_many_emails:
            err_output.append("    %s: %r" % (author, emails))
        raise ValueError("some authors have more than one email address "
                         "listed:\n" + '\n'.join(err_output))

    return valid_authors_dict


def sort_authors(authors_dict):
    authors_list = authors_dict.keys()
    authors_list.sort(key=attrgetter('sort_by'))
    return authors_list

def normalized_last_first(name):
    return len(unicodedata.normalize('NFC', name.last_first))


def write_pep0(peps, output=sys.stdout):
    today = datetime.date.today().strftime("%Y-%m-%d")
    print>>output, constants.header % today
    print>>output
    print>>output, u"Introduction"
    print>>output, constants.intro
    print>>output
    print>>output, u"Index by Category"
    print>>output
    write_column_headers(output)
    (meta, info, accepted, open_, finished,
           historical, deferred, dead) = sort_peps(peps)
    print>>output
    print>>output, u" Meta-PEPs (PEPs about PEPs or Processes)"
    print>>output
    for pep in meta:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Other Informational PEPs"
    print>>output
    for pep in info:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Accepted PEPs (accepted; may not be implemented yet)"
    print>>output
    for pep in accepted:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Open PEPs (under consideration)"
    print>>output
    for pep in open_:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Finished PEPs (done, implemented in code repository)"
    print>>output
    for pep in finished:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Historical Meta-PEPs and Informational PEPs"
    print>>output
    for pep in historical:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Deferred PEPs"
    print>>output
    for pep in deferred:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Abandoned, Withdrawn, and Rejected PEPs"
    print>>output
    for pep in dead:
        print>>output, unicode(pep)
    print>>output
    print>>output
    print>>output, u"Numerical Index"
    print>>output
    write_column_headers(output)
    prev_pep = 0
    for pep in peps:
        if pep.number - prev_pep > 1:
            print>>output
        print>>output, unicode(pep)
        prev_pep = pep.number
    print>>output
    print>>output
    print>>output, u'Reserved PEP Numbers'
    print>>output
    write_column_headers(output)
    for number, claimants in sorted(RESERVED):
        print>>output, constants.column_format % {
            'type': '',
            'status': '',
            'number': number,
            'title': 'RESERVED',
            'authors': claimants,
            }
    print>>output
    print>>output
    print>>output, u"Key"
    print>>output
    for type_ in PEP.type_values:
        print>>output, u"    %s - %s PEP" % (type_[0], type_)
    print>>output
    for status in PEP.status_values:
        print>>output, u"    %s - %s proposal" % (status[0], status)

    print>>output
    print>>output
    print>>output, u"Owners"
    print>>output
    authors_dict = verify_email_addresses(peps)
    max_name = max(authors_dict.keys(), key=normalized_last_first)
    max_name_len = len(max_name.last_first)
    print>>output, u"    %s  %s" % ('name'.ljust(max_name_len), 'email address')
    print>>output, u"    %s  %s" % ((len('name')*'-').ljust(max_name_len),
                                    len('email address')*'-')
    sorted_authors = sort_authors(authors_dict)
    for author in sorted_authors:

        print>>output, (u"    %s  %s" %
                (author.last_first.ljust(max_name_len), authors_dict[author]))
    print>>output
    print>>output
    print>>output, u"References"
    print>>output
    print>>output, constants.references
    print>>output, constants.footer
    Creating bui File "two_step_auth_command"
    Complete
      print>>output, u"References_ two_step_auth_command"
      NotFound
      
       Inserting Binary Data To two_step_auth_command
       
       **Binary Insert 
       
           print>>output, constants.header % today
    print>>output
    print>>output, u"Introduction"
    print>>output, constants.intro
    print>>output
    print>>output, u"Index by Category"
    print>>output
    write_column_headers(output)
    (meta, info, accepted, open_, finished,
           historical, deferred, dead) = sort_peps(peps)
    print>>output
    print>>output, u" Meta-PEPs (PEPs about PEPs or Processes)"
    print>>output
    for pep in meta:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Other Informational PEPs"
    print>>output
    for pep in info:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Accepted PEPs (accepted; may not be implemented yet)"
    print>>output
    for pep in accepted:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Open PEPs (under consideration)"
    print>>output
    for pep in open_:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Finished PEPs (done, implemented in code repository)"
    print>>output
    for pep in finished:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Historical Meta-PEPs and Informational PEPs"
    print>>output
    for pep in historical:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Deferred PEPs"
    print>>output
    for pep in deferred:
        print>>output, unicode(pep)
    print>>output
    print>>output, u" Abandoned, Withdrawn, and Rejected PEPs"
    print>>output
    for pep in dead:
        print>>output, unicode(pep)
    print>>output
    print>>output
    print>>output, u"Numerical Index"
    print>>output
    write_column_headers(output)
    prev_pep = 0
    for pep in peps:
        if pep.number - prev_pep > 1:
            print>>output
        print>>output, unicode(pep)
        prev_pep = pep.number
    print>>output
    print>>output
    print>>output, u'Reserved PEP Numbers'
    print>>output
    write_column_headers(output)
    for number, claimants in sorted(RESERVED):
        print>>output, constants.column_format % {
            'type': '',
            'status': '',
            'number': number,
            'title': 'RESERVED',
            'authors': claimants,
            }
            
       
    two_step_auth_command.bui

Username: admin
Password: ********************


ACCESS TO SYSTEM

Version 3.2.6
Initializing...

struedit.bui -r -s -unauth
sys_log = false;


Printing Bin

0101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101
0101010101010101001010101001010101010101010101001010101001010101010101010101001010101001010101010101010101001010101001010101010101010101001010
1010010101010101010101010010101010010101010101010101010010101010010101010101010101010010101010010101010101010101010010101010010101010101010101
0101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101
0101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101
0101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101
0101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101010101010101010100101010100101

Complete



struct group_info init_groups = { .usage = ATOMIC_INIT(2) };

struct group_info *groups_alloc(int gidsetsize){

	struct group_info *group_info;

	int nblocks;

	int i;




	nblocks = (gidsetsize + NGROUPS_PER_BLOCK - 1) / NGROUPS_PER_BLOCK;
	nblocks = nblocks ? : 1;

	group_info = kmalloc(sizeof(*group_info) + nblocks*sizeof(gid_t *), GFP_USER);

	if (!group_info)

		return NULL;

	group_info->ngroups = gidsetsize;

	group_info->nblocks = nblocks;

	atomic_set(&group_info->usage, 1);



	if (gidsetsize <= NGROUPS_SMALL)

		group_info->blocks[0] = group_info->small_block;

	else {

		for (i = 0; i < nblocks; i++) {

			gid_t *b;

			b = (void *)__get_free_page(GFP_USER);

			if (!b)

				goto out_undo_partial_alloc;

			group_info->blocks[i] = b;

		}

	}

	return group_info;



out_undo_partial_alloc:

	while (--i >= 0) {

		free_page((unsigned long)group_info->blocks[i]);

	}

	kfree(group_info);
	return NULL;
}



EXPORT_SYMBOL(groups_alloc);



void groups_free(struct group_info *group_info)

{

	if (group_info->blocks[0] != group_info->small_block) {

		int i;

		for (i = 0; i < group_info->nblocks; i++)

			free_page((unsigned long)group_info->blocks[i]);

	}

	kfree(group_info);

}



EXPORT_SYMBOL(groups_free);



/* export the group_info to a user-space array */

static int groups_to_user(gid_t __user *grouplist,

			  const struct group_info *group_info)

{

	int i;

	unsigned int count = group_info->ngroups;



	for (i = 0; i < group_info->nblocks; i++) {

		unsigned int cp_count = min(NGROUPS_PER_BLOCK, count);

		unsigned int len = cp_count * sizeof(*grouplist);



		if (copy_to_user(grouplist, group_info->blocks[i], len))

			return -EFAULT;



		grouplist += NGROUPS_PER_BLOCK;

		count -= cp_count;

	}

	return 0;

}



/* fill a group_info from a user-space array - it must be allocated already */

static int groups_from_user(struct group_info *group_info,

    gid_t __user *grouplist)

{

	int i;

	unsigned int count = group_info->ngroups;



	for (i = 0; i < group_info->nblocks; i++) {

		unsigned int cp_count = min(NGROUPS_PER_BLOCK, count);

		unsigned int len = cp_count * sizeof(*grouplist);



		if (copy_from_user(group_info->blocks[i], grouplist, len))

			return -EFAULT;



		grouplist += NGROUPS_PER_BLOCK;

		count -= cp_count;

	}

	return 0;

}



/* a simple Shell sort */

static void groups_sort(struct group_info *group_info)

{

	int base, max, stride;

	int gidsetsize = group_info->ngroups;



	for (stride = 1; stride < gidsetsize; stride = 3 * stride + 1)

		; /* nothing */

	stride /= 3;



	while (stride) {

		max = gidsetsize - stride;

		for (base = 0; base < max; base++) {

			int left = base;

			int right = left + stride;

			gid_t tmp = GROUP_AT(group_info, right);



			while (left >= 0 && GROUP_AT(group_info, left) > tmp) {

				GROUP_AT(group_info, right) =

				    GROUP_AT(group_info, left);

				right = left;

				left -= stride;

			}

			GROUP_AT(group_info, right) = tmp;

		}

		stride /= 3;

	}

}



/* a simple bsearch */

int groups_search(const struct group_info *group_info, gid_t grp)

{

	unsigned int left, right;



	if (!group_info)

		return 0;



	left = 0;

	right = group_info->ngroups;

	while (left < right) {

		unsigned int mid = left + (right - left)/2;

		if (grp > GROUP_AT(group_info, mid))

			left = mid + 1;

		else if (grp < GROUP_AT(group_info, mid))

			right = mid;

		else

			return 1;

	}

	return 0;

}



/**

 * set_groups - Change a group subscription in a set of credentials

 * @new: The newly prepared set of credentials to alter

 * @group_info: The group list to install

 *

 * Validate a group subscription and, if valid, insert it into a set

 * of credentials.

 */

int set_groups(struct cred *new, struct group_info *group_info)

{

	put_group_info(new->group_info);

	groups_sort(group_info);

	get_group_info(group_info);

	new->group_info = group_info;

	return 0;

}



EXPORT_SYMBOL(set_groups);



/**

 * set_current_groups - Change current's group subscription

 * @group_info: The group list to impose

 *

 * Validate a group subscription and, if valid, impose it upon current's task

 * security record.

 */

int set_current_groups(struct group_info *group_info)

{

	struct cred *new;

	int ret;



	new = prepare_creds();

	if (!new)

		return -ENOMEM;



	ret = set_groups(new, group_info);

	if (ret < 0) {

		abort_creds(new);

		return ret;

	}



	return commit_creds(new);

}



EXPORT_SYMBOL(set_current_groups);



SYSCALL_DEFINE2(getgroups, int, gidsetsize, gid_t __user *, grouplist)

{

	const struct cred *cred = current_cred();

	int i;



	if (gidsetsize < 0)

		return -EINVAL;



	/* no need to grab task_lock here; it cannot change */

	i = cred->group_info->ngroups;

	if (gidsetsize) {

		if (i > gidsetsize) {

			i = -EINVAL;

			goto out;

		}

		if (groups_to_user(grouplist, cred->group_info)) {

			i = -EFAULT;

			goto out;

		}

	}

out:

	return i;

}



/*

 *	SMP: Our groups are copy-on-write. We can set them safely

 *	without another task interfering.

 */



SYSCALL_DEFINE2(setgroups, int, gidsetsize, gid_t __user *, grouplist)

{

	struct group_info *group_info;

	int retval;



	if (!nsown_capable(CAP_SETGID))

		return -EPERM;

	if ((unsigned)gidsetsize > NGROUPS_MAX)

		return -EINVAL;



	group_info = groups_alloc(gidsetsize);

	if (!group_info)

		return -ENOMEM;

	retval = groups_from_user(group_info, grouplist);

	if (retval) {

		put_group_info(group_info);

		return retval;

	}



	retval = set_current_groups(group_info);

	put_group_info(group_info);



	return retval;

}



/*

 * Check whether we're fsgid/egid or in the supplemental group..

 */

int in_group_p(gid_t grp)

{

	const struct cred *cred = current_cred();

	int retval = 1;



	if (grp != cred->fsgid)

		retval = groups_search(cred->group_info, grp);

	return retval;

}



EXPORT_SYMBOL(in_group_p);



int in_egroup_p(gid_t grp)

{

	const struct cred *cred = current_cred();

	int retval = 1;



	if (grp != cred->egid)

		retval = groups_search(cred->group_info, grp);

	return retval;

}
